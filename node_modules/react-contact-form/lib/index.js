'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  isContent: _react2.default.PropTypes.bool,
  isEmail: _react2.default.PropTypes.bool,
  isSubject: _react2.default.PropTypes.bool,
  isSubmitButton: _react2.default.PropTypes.bool,
  onSubmit: _react2.default.PropTypes.func.isRequired,
  renderContent: _react2.default.PropTypes.func,
  renderEmail: _react2.default.PropTypes.func,
  renderSubject: _react2.default.PropTypes.func,
  renderSubmitButton: _react2.default.PropTypes.func,
  renderFormContainer: _react2.default.PropTypes.func.isRequired
};

var defaultProps = {
  isContent: true,
  isEmail: true,
  isSubject: true,
  isSubmitButton: true
};

var ContactForm = function (_React$Component) {
  _inherits(ContactForm, _React$Component);

  function ContactForm(props) {
    _classCallCheck(this, ContactForm);

    var _this = _possibleConstructorReturn(this, (ContactForm.__proto__ || Object.getPrototypeOf(ContactForm)).call(this, props));

    var content = '';
    var email = '';
    var subject = '';
    _this.state = {
      isContentValid: !props.isContent || content,
      isEmailValid: !props.isEmail || email,
      isSubjectValid: !props.isSubject || subject,
      content: content,
      email: email,
      subject: subject
    };
    _this.onSubjectChange = _this.onSubjectChange.bind(_this);
    _this.onEmailChange = _this.onEmailChange.bind(_this);
    _this.onContentChange = _this.onContentChange.bind(_this);
    _this.onSubmit = _this.onSubmit.bind(_this);
    return _this;
  }

  _createClass(ContactForm, [{
    key: 'onSubjectChange',
    value: function onSubjectChange(e) {
      var subject = e.target.value;
      this.setState({
        isSubjectValid: !this.props.isSubject || subject,
        subject: e.target.value
      });
    }
  }, {
    key: 'onEmailChange',
    value: function onEmailChange(e) {
      var email = e.target.value;
      this.setState({
        isEmailValid: !this.props.isEmail || email,
        email: email
      });
    }
  }, {
    key: 'onContentChange',
    value: function onContentChange(e) {
      var content = e.target.value;
      this.setState({
        isContentValid: !this.props.isContent || content,
        content: content
      });
    }
  }, {
    key: 'onSubmit',
    value: function onSubmit() {
      var onSubmit = this.props.onSubmit;
      var _state = this.state,
          isContentValid = _state.isContentValid,
          isEmailValid = _state.isEmailValid,
          isSubjectValid = _state.isSubjectValid,
          subject = _state.subject,
          email = _state.email,
          content = _state.content;

      if (!isContentValid || !isEmailValid || !isSubjectValid) {
        return;
      }
      onSubmit(subject, email, content);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          isContent = _props.isContent,
          isEmail = _props.isEmail,
          isSubject = _props.isSubject,
          isSubmitButton = _props.isSubmitButton,
          renderContent = _props.renderContent,
          renderEmail = _props.renderEmail,
          renderSubject = _props.renderSubject,
          renderSubmitButton = _props.renderSubmitButton,
          renderFormContainer = _props.renderFormContainer;
      var _state2 = this.state,
          isContentValid = _state2.isContentValid,
          isEmailValid = _state2.isEmailValid,
          isSubjectValid = _state2.isSubjectValid,
          subject = _state2.subject,
          email = _state2.email,
          content = _state2.content;

      var isValid = isContentValid && isEmailValid && isSubjectValid;
      return renderFormContainer(isValid, [isSubject && renderSubject(isSubjectValid, subject, this.onSubjectChange), isEmail && renderEmail(isEmailValid, email, this.onEmailChange), isContent && renderContent(isContentValid, content, this.onContentChange), isSubmitButton && renderSubmitButton(isValid, this.onSubmit)], this.onSubmit);
    }
  }]);

  return ContactForm;
}(_react2.default.Component);

exports.default = ContactForm;


ContactForm.propTypes = propTypes;
ContactForm.defaultProps = defaultProps;